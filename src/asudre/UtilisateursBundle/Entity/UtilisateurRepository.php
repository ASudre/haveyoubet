<?php

namespace asudre\UtilisateursBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends EntityRepository
{
	
	/**
	 * Récupération des utilisateurs ordonnés par cagnotte
	 * @param unknown $match Match dont on affiche le classement
	 * @param unknown $idGroupe Groupe dont on affiche le classement
	 */
	function getUtilisateursOrdCagnotteParGroupe($match, $idGroupe) {
		
		$query = $this->_em->createQuery('SELECT ut.username, h1.gain, 10000 + COALESCE(sum(h.gain), 0) AS cagnotte
				FROM asudreUtilisateursBundle:Utilisateur ut
				LEFT JOIN asudreCDM14Bundle:Historique h 
				WITH ut.id = h.utilisateur AND h.match IN (select m.id from asudreCDM14Bundle:matchs m where m.date <= :dateMatch)
				LEFT JOIN asudreCDM14Bundle:Historique h1 
				WITH ut.id = h1.utilisateur AND h1.match = :match
				JOIN ut.groupesJoueurs g
				WHERE g.id = :idGroupe
				GROUP BY ut.id
				ORDER BY cagnotte desc');
		$query->setParameters(array(
				'dateMatch' => $match->getDate(),
				'match' => $match,
				'idGroupe' => $idGroupe
		));
		
		return $query->getResult();
	}
	
	/**
	 * Récupération les gains pour l'ensemble des utilisateurs et l'ensemble des matchs joués
	 * @param unknown $match Groupe dont on affiche le classement
	 */
	function getUtilisateursGainsMatchsTous($match) {
	
		$query = $this->_em->createQuery('SELECT m1.id as idMatch, ut.id as userId, ut.username, COALESCE(h.gain, 0) as gain
				FROM asudreUtilisateursBundle:Utilisateur ut
				LEFT JOIN asudreCDM14Bundle:Historique h
				WITH ut.id = h.utilisateur AND h.match IN (select m.id from asudreCDM14Bundle:matchs m where m.date <= :dateMatch)
				LEFT JOIN asudreCDM14Bundle:matchs m1
				WITH m1.id = h.match
				ORDER BY m1.date, m1.id, ut.id');
		$query->setParameters(array(
				'dateMatch' => $match->getDate()
		));
	
		return $query->getResult();
	}
	
	/**
	 * Récupération des utilisateurs ordonnés par cagnotte
	 * @param unknown $match Match dont on affiche le classement
	 */
	function getUtilisateursOrdCagnotte($match) {
		$query = $this->_em->createQuery('SELECT ut.username, h1.gain, 10000 + COALESCE(sum(h.gain), 0) AS cagnotte
				FROM asudreUtilisateursBundle:Utilisateur ut
				LEFT JOIN asudreCDM14Bundle:Historique h
				WITH ut.id = h.utilisateur AND h.match IN (select m.id from asudreCDM14Bundle:matchs m where m.date <= :dateMatch)
				LEFT JOIN asudreCDM14Bundle:Historique h1
				WITH ut.id = h1.utilisateur AND h1.match = :match
				group by ut.id
				ORDER BY cagnotte desc');
		$query->setParameters(array(
				'dateMatch' => $match->getDate(),
				'match' => $match
		));
		return $query->getResult();
	}
	
	/**
	 * Récupère l'utilisateur dont le nom est en paramètre
	 * @param unknown $username
	 */
	public function getUtilisateurByUsername($username) {
		$query = $this->_em->createQuery('SELECT ut
				FROM asudreUtilisateursBundle:Utilisateur ut
				where ut.username = :username');
		$query->setParameters(array(
				'username' => $username
		));
		
		return $query->getResult();
	}
	
	/**
	 * Récupère l'utilisateur dont le courriel est en paramètre
	 * @param unknown $courriel
	 */
	public function getUtilisateurByCourriel($courriel) {
		$query = $this->_em->createQuery('SELECT ut
				FROM asudreUtilisateursBundle:Utilisateur ut
				where ut.email = :courriel');
		$query->setParameters(array(
				'courriel' => $courriel
		));
	
		return $query->getResult();
	}

	/**
	 * Ajout en base d'un nouvel utilisateur
	 * @param unknown $utilisateur
	 */
	public function creationUtilisateur($utilisateur) {
		$this->_em->persist($utilisateur);
		$this->_em->flush();
		
		return $utilisateur->getId();
	}
	
	/**
	 * Récupère l'utilisateur
	 * @param unknown $idUtilisateur
	 */
	public function getUtilisateur($idUtilisateur) {
		return $this->find($idUtilisateur);
	}
	
	/**
	 * Récupère l'ensemble des utilisateurs
	 */
	public function getUtilisateurs() {
		return $this->findAll();
	}
	
	/**
	 * Récupération des utilisateurs d'un groupe
	 * @param unknown $idGroupe
	 */
	function getUtilisateursGroupe($idGroupe) {
		$query = $this->_em->createQuery('SELECT ut
				FROM asudreUtilisateursBundle:Utilisateur ut
				JOIN ut.groupesJoueurs g
				WHERE g.id = :idGroupe
				AND ut.id != g.createur');
		$query->setParameters(array(
				'idGroupe' => $idGroupe
		));
		return $query->getResult();
	}
}
