<?php

namespace asudre\CDM14Bundle\Entity;

use Doctrine\ORM\EntityRepository;
use asudre\CDM14Bundle\Entity\Invitations;

/**
 * InvitationsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvitationsRepository extends EntityRepository
{
	
	public function estCodeUnique($code) {
		$query = $this->_em->createQuery('SELECT count(a) FROM asudreCDM14Bundle:Invitations a WHERE a.codeInscription = :code');
		$query->setParameters(array(
				'code' => $code
		));
	
		return $query->getScalarResult();
	}
	
	/**
	 * Création d'une invitations
	 * @param unknown $groupe
	 * @param unknown $courriel
	 * @param unknown $langue
	 * @param unknown $utilisateur
	 * @param unknown $code
	 */
	public function creationInvitation($groupe, $courriel, $langue, $utilisateur, $code) {
		try {
			$invitation = new Invitations();
			$invitation->setCodeInscription($code);
			$invitation->setCourriel($courriel);
			$invitation->setGroupe($groupe);
			$invitation->setHote($utilisateur);
			$invitation->setDate(new \DateTime("now"));
			$invitation->setLangue($langue);
		
			$this->_em->persist($invitation);
		
			// Étape 2 : On « flush » tout ce qui a été persisté avant
			$this->_em->flush();
		}
		catch (Exception $e) {
			throw $e;
		}
	}
	
	/**
	 * Récupère les invitations envoyées par un utilisateur
	 * @param unknown $utilisateur
	 */
	public function getInvitations($utilisateur) {
		$query = $this->_em->createQuery('SELECT a FROM asudreCDM14Bundle:Invitations a 
				WHERE a.hote = :utilisateur order by a.date desc');
		$query->setParameters(array(
				'utilisateur' => $utilisateur
		));
		
		return $query->getResult();
	}
	
	/**
	 * Récupère l'invitation à partir du code d'invitation
	 * @param unknown $codeInvitation
	 */
	function getInvitation($codeInvitation) {

		$query = $this->_em->createQuery('SELECT a FROM asudreCDM14Bundle:Invitations a 
				WHERE a.codeInscription = :codeInvitation order by a.date desc');
		$query->setParameters(array(
				'codeInvitation' => $codeInvitation
		));
		
		return $query->getResult();
	}
	
	/**
	 * Mise à jour de l'invitation une fois que l'utilisateur s'est inscrit sur le site
	 * @param unknown $invitation
	 * @param unknown $utilisateur
	 */
	public function miseAJourInvitation($invitation, $utilisateur) {
		$this->_em->persist($invitation);
		$invitation->setInvite($utilisateur);
		$this->_em->flush();
	}
}
